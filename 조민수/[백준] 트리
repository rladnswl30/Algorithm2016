#include <stdio.h>

#define BOOL int
#define TRUE 1
#define FALSE 0

typedef struct node_s {
	int num;				// 노드 번호
	BOOL is_removed;		// 지울 대상인지?
	int parent;				// 부모 값
	int child_count;		// 자식 개수
	int child_arr[50];		// 자식 값들
} node_s;

int
get_leaf_node_count(node_s node[], int size)
{
	int i, count = 0;

	for (i = 0; i < size; i++) {
		if (node[i].child_count == 0 && node[i].is_removed == FALSE) {
			count++;
		}
	}

	return count;
}

void
remove_node_recursive(node_s node[], int remove_node_num)
{
	int parent = node[remove_node_num].parent;
	int child_arr[50];
	int i;

	if (parent != -1 && node[parent].is_removed == FALSE) {
		node[parent].child_count -= 1;
	}

	node[remove_node_num].is_removed = TRUE;

	if (node[remove_node_num].child_count > 0) {	// 자식이 있을 경우
		for (i = 0; i < node[remove_node_num].child_count; i++) {
			remove_node_recursive(node, node[remove_node_num].child_arr[i]);
		}
	}
}

int
main()
{
	int i, j;
	int node_num;
	int parent_node_arr[50];
	int tree_count = 0;
	int remove_node_num;
	node_s *node;

	scanf("%d", &node_num);

	node = (node_s *)malloc(sizeof(node_s) * node_num);

	for (i = 0; i < node_num; i++) {
		scanf("%d", &parent_node_arr[i]);
	}

	for (i = 0; i < node_num; i++) {
		node[i].child_count = 0;			// 초기화 : 자식 개수가 0이다.
		node[i].is_removed = FALSE;			// 초기화 : 지울 노드 대상이 아니다.
	}

	for (i = 0; i < node_num; i++) {
		node[i].num = i;																		// 노드 번호 세팅
		node[i].parent = parent_node_arr[i];													// 노드 부모 세팅

		if (tree_count > 1 && parent_node_arr[i] == -1) {
			break;
		}

		if (parent_node_arr[i] == -1) {
			tree_count++;
		}
		else {
			node[parent_node_arr[i]].child_arr[node[parent_node_arr[i]].child_count] = i;		// 노드의 자식 값 세팅
			node[parent_node_arr[i]].child_count++;												// 노드의 자식 개수 세팅
		}
	}

	// 지울 노드 입력
	scanf("%d", &remove_node_num);

	// 노드 지우기(자식이 있을 경우 또 자식의 자식이 있을 경우 재귀로 모두 지워준다.)
	remove_node_recursive(node, remove_node_num);

	// 리프 노드 개수 출력
	printf("%d\n", get_leaf_node_count(node, node_num));

	free(node);

	return 0;
}

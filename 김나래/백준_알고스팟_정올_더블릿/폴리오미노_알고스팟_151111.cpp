/*
동적 프로그래밍
https://algospot.com/judge/problem/read/POLY
채점 성공
폴리오미노

*/

#include <iostream>

using namespace std;
const int REMAINDER = 10000000;

// 하향식 재귀
int poly(int(&mem)[100][100], int n, int floor) {
	int i;

	if (mem[n][floor] != 0) return mem[n][floor];

	for (i = 0; i < n - floor; ++i) {
		for (int j = 0; j < n - i; ++j) {
			int resPoly = mem[n - i - 1][j] == 0 ?
				poly(mem, n - 1, j) : mem[n - i - 1][j];
			int coefficient = i + j + 1;
			mem[n][i] = (mem[n][i] % REMAINDER)
				+ (coefficient * resPoly) % REMAINDER;
		}
	}

	mem[n][i]++;
	return mem[n][floor];
}
// 상향식 
/* 상향식 푸는중
void BottomUpPoly(int (&mem)[100][100], int n) {
int i, j, res;

for (i = 1; i < n; ++i) {
for (j = 0; j < i; ++j) {
int coefficient = i + j + 1;
mem[i][j] = mem[i-1][j] * coefficient;
}
mem[i][j]++;
}
}*/

int main() {
	int C, n;
	int mem[100][100];

	// 왜 fill 함수가 안먹는것인지?
	for (int i = 0; i < 100; ++i)
		for (int j = 0; j < 100; ++j)
			mem[i][j] = 0;

	cin >> C;
	int *res = new int[C];
	for (int c = 0; c < C; ++c) {
		cin >> n;
		poly(mem, n - 1, 0);
		res[c] = 0;
		for (int i = 0; i < n; ++i)
			res[c] = (res[c] + mem[n - 1][i]) % REMAINDER;
	}

	for (int c = 0; c < C; ++c)
		cout << res[c] << endl;

	return 0;
}

/*
테스트 케이스
입력 :
5
1
4
2
3
5
답 :
1
19
2
6
61

N : 폴리오미노 개수
1 : 1
2 : 2
3 : 6
4 : 19
5 : 61
6 : 196
7 : 629
8 : 2017
9 : 6466
10 : 20727
11 : 66441
12 : 212980
13 : 682721
14 : 2188509
15 : 7015418
16 : 2488411
17 : 2088165
18 : 1083620
19 : 754589
20 : 4540265
21 : 1753682
22 : 4911
23 : 5909841
24 : 6529556
25 : 1298537
26 : 4425157
27 : 9154250
28 : 9989299
29 : 3567373
30 : 4528772
31 : 7629445
32 : 715313
33 : 8285538
34 : 6938279
35 : 9553881
36 : 2343604
37 : 2593969
38 : 4780141
39 : 5117338
40 : 2501579
41 : 5807093
42 : 1993764
43 : 9325485
44 : 5899449
45 : 2193906
46 : 6975327
47 : 3117089
48 : 5533780
49 : 3750585
50 : 2484821
51 : 8305130
52 : 9134243
53 : 7474589
54 : 6653764
55 : 7483669
56 : 740353
57 : 7931138
58 : 4407895
59 : 9482921
60 : 8283892
61 : 2670593
62 : 3297405
63 : 928442
64 : 2242747
65 : 7904261
66 : 7535844
67 : 1320381
68 : 5468041
69 : 8240914
70 : 8209807
71 : 5234801
72 : 1669012
73 : 4540681
74 : 1959525
75 : 4688906
76 : 7890579
77 : 4468653
78 : 5864836
79 : 9605925
80 : 4850385
81 : 469794
82 : 6819975
83 : 212857
84 : 5203636
85 : 1808081
86 : 3466381
87 : 5489882
88 : 417067
89 : 7521685
90 : 6648484
91 : 2258893
92 : 4841817
93 : 4990770
94 : 96703
95 : 4915393
96 : 3863124
97 : 5294681
98 : 9093109
99 : 3855274
100 : 6803331
*/